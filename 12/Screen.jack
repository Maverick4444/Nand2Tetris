// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {

	var int counter, varValue;
	
	let screen = 16384;
	let color = true;

	let twoToThe = Array.new(16);
	let counter = 0;
	let varValue = 1;
	
	while (counter < 16) {
		let twoToThe[counter] = varValue;
		let varValue = varValue + varValue;
		let counter = counter + 1;	
	}
	return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	var int i;
	let i = 0;


	while (i < 8192) {
		let screen[i] = 0;
		let i = i + 1;
	}
	
	return;
	
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
	let color = b;
	return;

    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
	var int a, bit, value;
	let a = screen + (y * 32) + (x / 16);
	let bit = x - ((x / 16) * 16);


	if (color) {
		do Memory.poke(a, (twoToThe[bit] | Memory.peek(a))); 
		
	}
	else {

		do Memory.poke(a, ((~twoToThe[bit]) & Memory.peek(a)));

	}
	return;


    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	var int x, y, dx, dy, a, b, aI, bI, diff, i, neg, z;
	let x = x1;
	let y = y1;
	let a = 0;
	let b = 0;
	let diff = 0;
	let dx = Math.abs(x2 - x1);
	let dy = Math.abs(y2 - y1);
	let neg = 1;
	
	
	if (x2 = x1){
		if (y2 < y1){
			let neg = -1;
			}
		while (Math.abs(i) < dy){
			
			do Screen.drawPixel(x, y + i);
			
			let i = i + neg;
		}
		return;
	}

	if (x2 > x1){
		let aI = 1;
	}
	else {
		let aI = -1;
	}


	if (y2 = y1){
		if (x2 < x1){
			let neg = -1;
			}
		while (Math.abs(i) < dx){
			do Screen.drawPixel(x + i, y);
			let i = i + neg;
		}
		return;
	}

	if (y2 > y1){
		let bI = 1;
	}
	else {
		let bI = -1;	
	}
	
	while ((~(Math.abs(a) > dx)) & (~(Math.abs(b) > dy))){
		do Screen.drawPixel(x + a, y + b);

		if (diff < 0){
			let a = a + aI;
			let diff = diff + dy;
		}
		else {
			let b = b + bI;
			let diff = diff - dx;
		}
	}	
	return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	var int yC;
	
	let yC = y1;

	while (~(yC = y2)){
		do Screen.drawLine(x1, yC, x2, yC);
		let yC = yC + 1;
	}
	

	return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
	var int dy;
	let dy = -r;

	while (dy < r){
		do Screen.drawLine(x - Math.sqrt((r * r) - (dy * dy)), y + dy, x + Math.sqrt((r * r) - (dy * dy)), y + dy);
		let dy = dy + 1;
	}
	return;
    }
}
