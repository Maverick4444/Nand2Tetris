/**
 * Implements the SquareCircle game.
 * This game allows the user to move a black square around
 * the screen. The user has 20 moves to hit as many circles as possible.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen and a circle is displayed as well. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * If the square hits a circle, the user gains one point, and the circle moves to the other location.
 * There are only two circle locations, which alternate. 
 * The points get tallied up at the end, after 20 moves.
 * The 'q' key is used to quit the game.
 */

class SquareCircleGame {
   field Square square; // the square of this game
   field int direction; // the square's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right
   field boolean left; //circle is either left or right
   field int points;
   field int moveCounter;
   field Circle circle; // the circle of this game


   /** Constructs a new SquareCircle Game. */
   constructor SquareCircleGame new() {
      // Creates a 30 by 30 pixels square and positions it at the top-left
      // of the screen. Creates the circle as well.
      let square = Square.new(0, 0, 20);
      let direction = 0;  // initial state is no movement
      let circle = Circle.new();
      //new circle at the left position
      do circle.draw(100, 100, 10);
      let left = true;
      let points = 0;
      let moveCounter = 0;
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do square.dispose();
      do circle.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do square.moveUp(); }
      if (direction = 2) { do square.moveDown(); }
      if (direction = 3) { do square.moveLeft(); }
      if (direction = 4) { do square.moveRight(); }

      do HitTest();
      if (moveCounter = 20){
	do Output.printString("Game over. In 20 moves, you scored this many points: ");
	do Output.printInt(points);
	do Sys.halt();
	}

      do Sys.wait(5);  // delays the next movement
      return;
   }

   method void drawCircle(){
	let left = ~left;
	let points = points + 1;
	
	if(left){
		do circle.draw(100, 100, 10); //the left circle
	}
	if(~left){
		do circle.draw(350, 200, 10); //the right circle
	}
	return;
}
   /** this is a rough formula for seeing when the square hits the circle. 
     *this was done largely with trial and error. a more precise mathematical approach would have been ideal
    */
   method void HitTest(){
	var int CircleXminusThirty;
         var int CircleXplusTen;
	var int CircleYminusThirty;
         var int CircleYplusFifteen;

	let CircleXminusThirty = circle.ReturnX() - 30;
	let CircleXplusTen = circle.ReturnX() + 10;  
	let CircleYminusThirty = circle.ReturnY() - 30;
	let CircleYplusFifteen = circle.ReturnY() + 15;

	if (((square.ReturnX() > CircleXminusThirty) & (square.ReturnX() < CircleXplusTen)) & ((square.ReturnY() > CircleYminusThirty) & (square.ReturnY() < CircleYplusFifteen))) {do drawCircle();}
         return;
   }

   /** Runs the square game: handles the user's inputs and moves the square accordingly */
    
  

    method void SquareRun() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      
      while (~exit) {
	

         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            do moveSquare();
	    
      		
	    
         }

	let moveCounter = moveCounter + 1;
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveSquare();
	   
		
     	
     	    
		
         }

     } // while exit
     return;
   }

			
	


}



